{"version":3,"sources":["containers/SignIn/LoginForm.js","containers/SignIn/index.js"],"names":["LoginForm","onSubmit","loginSchema","useMemo","yup","shape","username","required","password","useForm","mode","resolver","yupResolver","register","handleSubmit","errors","formState","isValid","isSubmitting","className","autoComplete","TextField","name","type","variant","inputRef","label","margin","error","helperText","message","fullWidth","Button","color","disabled","SignIn","props","dispatch","useDispatch","token","useSelector","AuthSelector","getAuthToken","alertMessage","CommonSelector","getAlertMessage","alertMessageFlag","getAlertMessageFlag","useEffect","history","push","toastId","toast","isActive","CommonAction","hideMessage","Link","data-panel","href","params","AuthAction","signIn"],"mappings":"oOAuEeA,EA/DG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACVC,EAAcC,mBAChB,kBACIC,MAAaC,MAAM,CACfC,SAAUF,MAAaG,WACvBC,SAAUJ,MAAaG,eAE/B,IAP0B,EAUwBE,YAAQ,CAC1DC,KAAM,MACNC,SAAUC,YAAYV,KAFlBW,EAVsB,EAUtBA,SAAUC,EAVY,EAUZA,aAAcC,EAVF,EAUEA,OAAQC,EAVV,EAUUA,UAKhCC,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,aAEjB,OACI,yBAAKC,UAAU,uBACX,0BAAMlB,SAAUa,EAAab,GAAWmB,aAAa,OACjD,kCACI,kBAACC,EAAA,EAAD,CACIC,KAAK,WACLC,KAAK,OACLC,QAAQ,WACRC,SAAUZ,EACVa,MAAM,iBACNC,OAAO,SACPR,UAAU,YACVS,QAASb,EAAOT,SAChBuB,WAAYd,EAAOT,SAAWS,EAAOT,SAASwB,QAAU,GACxDC,WAAS,EACTxB,UAAQ,IAEZ,kBAACc,EAAA,EAAD,CACIC,KAAK,WACLC,KAAK,WACLC,QAAQ,WACRC,SAAUZ,EACVa,MAAM,WACNC,OAAO,SACPR,UAAU,OACVS,QAASb,EAAOP,SAChBqB,WAAYd,EAAOP,SAAWO,EAAOP,SAASsB,QAAU,GACxDC,WAAS,EACTxB,UAAQ,IAEZ,6BACI,kBAACyB,EAAA,EAAD,CAAQT,KAAK,SAASC,QAAQ,YAAYS,MAAM,UAAUF,WAAS,EAACZ,UAAU,iBACtEe,UAAWjB,GAAWC,GAD9B,kBCyBTiB,UAvEA,SAACC,GACZ,IAAMC,EAAWC,cACXC,EAAQC,YAAYC,IAAaC,gBACjCC,EAAeH,YAAYI,IAAeC,mBAC1CC,EAAmBN,YAAYI,IAAeG,uBAEpDC,qBAAU,WACQ,OAAVT,GACAH,EAAMa,QAAQC,KAAK,OAExB,CAACX,EAAOH,EAAMa,UAGjBD,qBAAU,WACN,IAAIG,EAAU,KACVR,IACyB,UAArBG,IACKM,IAAMC,SAASF,KAChBA,EAAUC,IAAMxB,MAAMe,KAK9BN,EAASiB,IAAaC,kBAE3B,CAACZ,EAAcG,EAAkBT,IAMpC,OACI,yBAAKlB,UAAU,sEACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,uGACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,mCACX,yBAAKA,UAAU,0CAAf,eACA,wBAAIA,UAAU,wBAEd,yBAAKA,UAAU,wBAAf,mBAIZ,yBAAKA,UAAU,sCACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,yBACX,0BAAMA,UAAU,8BAAhB,yBACA,uBAAGA,UAAU,uCAAb,mCACI,kBAACqC,EAAA,EAAD,CAAMC,aAAW,gBAAgBC,KAAM,6BAAvC,qBAGR,yBAAKvC,UAAU,OACX,kBAAC,EAAD,CAAWlB,SA5BtB,SAAC0D,GAClBtB,EAASuB,IAAWC,OAAOF,aAkCvB,kBAAC,IAAD","file":"static/js/8.84883c17.chunk.js","sourcesContent":["import React, {useMemo} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from '@hookform/resolvers';\nimport * as yup from \"yup\";\n\n\nconst LoginForm = ({onSubmit}) => {\n    const loginSchema = useMemo(\n        () =>\n            yup.object().shape({\n                username: yup.string().required(),\n                password: yup.string().required(),\n            }),\n        []\n    );\n\n    const { register, handleSubmit, errors, formState } = useForm({\n        mode: 'all',\n        resolver: yupResolver(loginSchema),\n    });\n\n    const { isValid, isSubmitting } = formState;\n\n    return (\n        <div className=\"col-xs-12 col-sm-12\">\n            <form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\n                <fieldset>\n                    <TextField\n                        name=\"username\"\n                        type=\"text\"\n                        variant=\"outlined\"\n                        inputRef={register}\n                        label=\"Email/Username\"\n                        margin=\"normal\"\n                        className=\"mt-4 mb-3\"\n                        error={!!errors.username}\n                        helperText={errors.username ? errors.username.message : ''}\n                        fullWidth\n                        required />\n\n                    <TextField\n                        name=\"password\"\n                        type=\"password\"\n                        variant=\"outlined\"\n                        inputRef={register}\n                        label=\"Password\"\n                        margin=\"normal\"\n                        className=\"mb-4\"\n                        error={!!errors.password}\n                        helperText={errors.password ? errors.password.message : ''}\n                        fullWidth\n                        required />\n\n                    <div>\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth className=\"mt-3 jr-btn-lg\"\n                                disabled={!isValid || isSubmitting}>\n                            Let Me In\n                        </Button>\n                    </div>\n                </fieldset>\n            </form>\n        </div>\n    )\n}\n\nLoginForm.propTypes = {\n    onSubmit: PropTypes.func,\n};\n\nexport default LoginForm;\n","import React, {useEffect} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {toast, ToastContainer} from \"react-toastify\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Link} from \"@material-ui/core\";\nimport {AuthAction, CommonAction} from \"actions\";\nimport {AuthSelector, CommonSelector} from \"selectors\";\nimport LoginForm from \"./LoginForm\";\n\n\nconst SignIn = (props) => {\n    const dispatch = useDispatch();\n    const token = useSelector(AuthSelector.getAuthToken());\n    const alertMessage = useSelector(CommonSelector.getAlertMessage());\n    const alertMessageFlag = useSelector(CommonSelector.getAlertMessageFlag());\n\n    useEffect(() => {\n        if (token !== null) {\n            props.history.push('/');\n        }\n    }, [token, props.history]);\n\n    // Logic to display Toastify alerts.\n    useEffect(() => {\n        let toastId = null;\n        if (alertMessage) {\n            if (alertMessageFlag === 'error') {\n                if (!toast.isActive(toastId)) {\n                    toastId = toast.error(alertMessage);\n                }\n            }\n\n            // In any case, clear the message.\n            dispatch(CommonAction.hideMessage());\n        }\n    }, [alertMessage, alertMessageFlag, dispatch]);\n\n    const handleSubmit = (params) => {\n        dispatch(AuthAction.signIn(params));\n    }\n\n    return (\n        <div className=\"animated slideInUpTiny animation-duration-3 container-fluid signin\">\n            <div className=\"row\">\n                <div className=\"maz-container d-flex col-xs-12 col-sm-10 col-md-8 col-lg-6 offset-sm-1 offset-md-2 offset-lg-3 pl-3\">\n                    <div className=\"col-sm-5 maz-panel-left\">\n                        <div className=\"brand-col\">\n                            <div className=\"headline justify-content-center\">\n                                <div className=\"jr-fs-xlxl text-center text-capitalize\">MAZ Systems</div>\n                                <hr className=\"text-white bg-white\"/>\n\n                                <div className=\"jr-fs-xl text-center\">Calendar App</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-7 maz-panel-right pl-3 pr-3\">\n                        <div className=\"maz-login\">\n                            <div className=\"maz-panel text-center active\">\n                                <div className=\"maz-heading mt-4 mb-3\">\n                                    <span className=\"jr-fs-xxl font-weight-bold\">Login to your account</span>\n                                    <p className=\"font-weight-light font-size-20 mt-2\">Donâ€™t have an account? &nbsp;\n                                        <Link data-panel=\".panel-signup\" href={\"mailto:geekashu@gmail.com\"}>Contact Ashish!</Link>\n                                    </p>\n                                </div>\n                                <div className=\"row\">\n                                    <LoginForm onSubmit={handleSubmit} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <ToastContainer />\n        </div>\n    );\n}\n\nSignIn.propTypes = {\n    history: PropTypes.object,\n};\n\nexport default SignIn;\n\n"],"sourceRoot":""}